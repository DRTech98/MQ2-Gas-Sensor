#include "main.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#define BATLED GPIO_PIN_7


ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart1;


uint16_t ADCValues[2];              //Array to store ADC values
uint16_t ADCCount = sizeof (ADCValues)/ sizeof (ADCValues[0]);
uint16_t ADC_MQ2_AVG;               //ADC AVG of MQ2 Sensor
uint16_t ADC_Voltage_AVG;           //ADC AVG of Battery Voltage

float Voltage = 0;					//Voltage global variable for Battery
float result_ratio;					//MQ2 Sensor result of ADC sample conversion
float Vresult_ratio;                //Battery voltage result of ADC sample conversion
float Ro =  10;                     //Initialization of Ro to 10k.
char msg[50];

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM1_Init(void);

uint8_t ADCConversionComplete = 0;

static void uart_send_str (const char* msg) //Function to communicate with UART terminal
{
    HAL_UART_Transmit (&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) //Conversion callback function for DMA
{
	ADCConversionComplete = 1;
}


static float ReadSensor (uint32_t sample_count1, int pause_ms) //Function used to obtain ADC values for MQ2 and AVG them
{
    uint32_t i;
    uint16_t MQ2ADCVAL;
    uint32_t ADCsum1 = 0;
    for (i = 0; i < sample_count1; i++) {
    	HAL_ADC_Start_DMA(&hadc,(uint32_t*)ADCValues,ADCCount);
    	MQ2ADCVAL =  (uint16_t)ADCValues[0];
        ADCsum1 += MQ2ADCVAL;
        HAL_Delay (pause_ms);
    }
    ADC_MQ2_AVG = ADCsum1 / sample_count1;
    return 0;
}


static float BAT_VOLT (uint32_t sample_count2, int pause_ms) //Battery voltage function to obtain ADC/Voltage value
{
    uint32_t i;
    uint16_t ADCVoltage;
    uint32_t ADCsum2 = 0;
    for (i = 0; i < sample_count2; i++) {
    	HAL_ADC_Start_DMA(&hadc,(uint32_t*)ADCValues,ADCCount);
    	ADCVoltage = (uint16_t)ADCValues[1];
    	Voltage = ((float)ADCVoltage *3.3f) /(4095.0f);
        ADCsum2 += ADCVoltage;
        HAL_Delay (pause_ms);
    }
    ADC_Voltage_AVG = ADCsum2/ sample_count2;

    return 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1) //Timer callback function to toggle LED if voltage < 2.5V
{
	if(Voltage<2.5)
	{
		HAL_GPIO_TogglePin(GPIOC,BATLED);
	}
	else{
		HAL_GPIO_WritePin(GPIOC,BATLED,GPIO_PIN_RESET);
	}
}


int main(void)
{

  HAL_Init();


  SystemClock_Config();


  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC_Init();
  MX_USART1_UART_Init();
  MX_TIM1_Init();

  HAL_TIM_Base_Start_IT(&htim1);



  while (1)
  {
	      result_ratio = ReadSensor (5, 10) / Ro;
	 	  Vresult_ratio = BAT_VOLT(5,10);

	   	  while((ADCConversionComplete == 0))
	   	  {

	   	  }

	   	  sprintf(msg, "MQ2ADCVAL: %hu\tADCVoltage: %hu Voltage: %f\r\n",ADC_MQ2_AVG,ADC_Voltage_AVG,Voltage);
	   	  uart_send_str(msg);
  }

}
